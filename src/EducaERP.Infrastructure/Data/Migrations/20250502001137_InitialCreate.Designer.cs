// <auto-generated />
using System;
using EducaERP.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EducaERP.Infrastructure.Data.Migrations
{
    [DbContext(typeof(EducaERPDbContext))]
    [Migration("20250502001137_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataAula")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataaula");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplinaid");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observacoes");

                    b.Property<int>("Presenca")
                        .HasColumnType("integer")
                        .HasColumnName("presenca");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("frequencias");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<int>("CargaHorariaTotal")
                        .HasColumnType("integer")
                        .HasColumnName("cargahorariatotal");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int>("DuracaoMeses")
                        .HasColumnType("integer")
                        .HasColumnName("duracaomeses");

                    b.Property<int>("Modalidade")
                        .HasColumnType("integer")
                        .HasColumnName("modalidade");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer")
                        .HasColumnName("nivel");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("cursos");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.CourseDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cursoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplinaid");

                    b.Property<bool>("Obrigatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("obrigatoria");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("ordem");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("CursoId", "DisciplinaId")
                        .IsUnique();

                    b.ToTable("cursodisciplinas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("integer")
                        .HasColumnName("cargahoraria");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<bool>("Obrigatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("obrigatoria");

                    b.Property<int>("Periodo")
                        .HasColumnType("integer")
                        .HasColumnName("periodo");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("disciplinas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataavaliacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("DescricaoAvaliacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricaoavaliacao");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplinaid");

                    b.Property<decimal>("NotaObtida")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("notaobtida");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("peso");

                    b.Property<int>("TipoAvaliacao")
                        .HasColumnType("integer")
                        .HasColumnName("tipoavaliacao");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("notas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("funcionarioid");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("professorid");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senhahash");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("tipousuario");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usuario");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("Usuario")
                        .IsUnique();

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Enrollments.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<string>("AnoLetivo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("anoletivo");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cursoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("PeriodoLetivo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("periodoletivo");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("CursoId");

                    b.ToTable("matriculas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Financial.Installment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datavencimento");

                    b.Property<Guid>("MensalidadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("mensalidadeid");

                    b.Property<bool>("Pago")
                        .HasColumnType("boolean")
                        .HasColumnName("pago");

                    b.Property<int>("ParcelaNumero")
                        .HasColumnType("integer")
                        .HasColumnName("parcelanumero");

                    b.Property<decimal>("ValorParcela")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valorparcela");

                    b.HasKey("Id");

                    b.HasIndex("MensalidadeId");

                    b.ToTable("parcelamentos");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Financial.Tuition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cursoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datapagamento");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datavencimento");

                    b.Property<int>("FormaPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("formapagamento");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("referencia");

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("statuspagamento");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("CursoId");

                    b.ToTable("mensalidades");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Institutions.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Cargo")
                        .HasColumnType("integer")
                        .HasColumnName("cargo");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("instituicaoid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("InstituicaoId");

                    b.ToTable("funcionarios");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Institutions.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("instituicoes");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AnoPublicacao")
                        .HasColumnType("integer")
                        .HasColumnName("anopublicacao");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("autor");

                    b.Property<int>("Categoria")
                        .HasColumnType("integer")
                        .HasColumnName("categoria");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Editora")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("editora");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("isbn");

                    b.Property<int>("QuantidadeDisponivel")
                        .HasColumnType("integer")
                        .HasColumnName("quantidadedisponivel");

                    b.Property<int>("QuantidadeTotal")
                        .HasColumnType("integer")
                        .HasColumnName("quantidadetotal");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("livros");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.BookLoan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datadevolucao");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataemprestimo");

                    b.Property<DateTime>("DataPrevistaDevolucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataprevistadevolucao");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("funcionarioid");

                    b.Property<Guid>("LivroId")
                        .HasColumnType("uuid")
                        .HasColumnName("livroid");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("professorid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("LivroId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("emprestimos");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("alunoid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datareserva");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("funcionarioid");

                    b.Property<Guid>("LivroId")
                        .HasColumnType("uuid")
                        .HasColumnName("livroid");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("professorid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("LivroId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("reservas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("instituicaoid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("InstituicaoId");

                    b.ToTable("alunos");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Teachers.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("instituicaoid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<string>("Titulacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("titulacao");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("InstituicaoId");

                    b.ToTable("professores");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Teachers.TeacherDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataatualizacao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datacriacao");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datafim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datainicio");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplinaid");

                    b.Property<bool>("EhResponsavel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ehresponsavel");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("professorid");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProfessorId", "DisciplinaId")
                        .IsUnique();

                    b.ToTable("professordisciplinas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Attendance", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("Frequencias")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Academics.Discipline", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.CourseDiscipline", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Academics.Course", "Curso")
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Academics.Discipline", "Disciplina")
                        .WithMany("Cursos")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Grade", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("Notas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Academics.Discipline", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Authentication.User", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Institutions.Employee", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Teachers.Teacher", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Aluno");

                    b.Navigation("Funcionario");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Enrollments.Enrollment", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Academics.Course", "Curso")
                        .WithMany("Matriculas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Financial.Installment", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Financial.Tuition", "Mensalidade")
                        .WithMany("Parcelamentos")
                        .HasForeignKey("MensalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mensalidade");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Financial.Tuition", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("Mensalidades")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Academics.Course", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Institutions.Employee", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Institutions.Institution", "Instituicao")
                        .WithMany("Funcionarios")
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.BookLoan", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("Emprestimos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Institutions.Employee", "Funcionario")
                        .WithMany("Emprestimos")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Library.Book", "Livro")
                        .WithMany("Emprestimos")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Teachers.Teacher", "Professor")
                        .WithMany("Emprestimos")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Aluno");

                    b.Navigation("Funcionario");

                    b.Navigation("Livro");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.BookReservation", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Students.Student", "Aluno")
                        .WithMany("ReservaLivros")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Institutions.Employee", "Funcionario")
                        .WithMany("ReservaLivros")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EducaERP.Core.Domain.Library.Book", "Livro")
                        .WithMany("Reservas")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Teachers.Teacher", "Professor")
                        .WithMany("ReservaLivros")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Aluno");

                    b.Navigation("Funcionario");

                    b.Navigation("Livro");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Students.Student", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Institutions.Institution", "Instituicao")
                        .WithMany("Alunos")
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Teachers.Teacher", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Institutions.Institution", "Instituicao")
                        .WithMany("Professores")
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Teachers.TeacherDiscipline", b =>
                {
                    b.HasOne("EducaERP.Core.Domain.Academics.Discipline", "Disciplina")
                        .WithMany("Professores")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducaERP.Core.Domain.Teachers.Teacher", "Professor")
                        .WithMany("Disciplinas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Course", b =>
                {
                    b.Navigation("Disciplinas");

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Academics.Discipline", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Professores");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Financial.Tuition", b =>
                {
                    b.Navigation("Parcelamentos");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Institutions.Employee", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("ReservaLivros");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Institutions.Institution", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Funcionarios");

                    b.Navigation("Professores");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Library.Book", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Students.Student", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Frequencias");

                    b.Navigation("Matriculas");

                    b.Navigation("Mensalidades");

                    b.Navigation("Notas");

                    b.Navigation("ReservaLivros");
                });

            modelBuilder.Entity("EducaERP.Core.Domain.Teachers.Teacher", b =>
                {
                    b.Navigation("Disciplinas");

                    b.Navigation("Emprestimos");

                    b.Navigation("ReservaLivros");
                });
#pragma warning restore 612, 618
        }
    }
}
